MAIN CLASS
   - check for existing studentTable, facultyTable
      > if none, create a new one w/trees masterStudent, masterFaculty
      > if exists, read through to copy into trees masterStudent, masterFaculty
         ~method in tree class readFrom(?)
   -display options
      >loop until chosen
      >take a # input
      >move to particular class
STUDENT CLASS
   -basic variables (see assignment page)
   -print
   -get/set functions (change major, etc options)
FACULTY CLASS
   -basic variables (see assignment page)
   -print
   -get/set functions
TREENODE CLASS
   -store key (id number)
   -store data (student object)
   -store height it sits at in BST
   -point left and right
BST CLASS //look into making this an AVL
   -store pointer to root



i'm anticipating this being pretty simple once the tree gets implemented--look into doing AVL?
the only issue i'm really looking forward to having is working with the array and pointing to it through other things.
other than that should be pretty gucci! 

in regards to the undo function, possibly always have 5 different files of past trees loaded into some sort of list,
get rid of the last item in the list when it gets filled out, iterate through with each undo function, when moving forward
discard of all past items, etc.
